from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from typing import Sequence
from services.api import CourseDTO


def start_kb() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
    return InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text="üìù –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è", callback_data="reg_start")]]
    )


def nav_kb(include_back: bool = True) -> InlineKeyboardMarkup:
    """–ù–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞"""
    buttons = []
    if include_back:
        buttons.append(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="reg_back"))
    buttons.append(InlineKeyboardButton(text="–°–Ω–∞—á–∞–ª–∞", callback_data="reg_restart"))
    return InlineKeyboardMarkup(inline_keyboard=[buttons])


def confirm_kb() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"""
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="reg_confirm")],
            [InlineKeyboardButton(text="üîÑ –°–Ω–∞—á–∞–ª–∞", callback_data="reg_restart")],
        ]
    )


def main_menu_kb() -> InlineKeyboardMarkup:
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üìö –í—ã–±—Ä–∞—Ç—å –∫—É—Ä—Å", callback_data="menu_choose_course")],
            [InlineKeyboardButton(text="‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", callback_data="menu_info")],
        ]
    )


def back_menu_kb() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é"""
    return InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_menu")]]
    )

def courses_kb(
    courses: Sequence[CourseDTO],
    add_other: bool = False,
) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–ø–∏—Å–∫–∞ –∫—É—Ä—Å–æ–≤"""
    rows = [
        [InlineKeyboardButton(text=f"{c.name} ({c.semester})", callback_data=f"course_{c.id}")]
        for c in courses
    ]

    nav = []
    if add_other:
        nav.append(InlineKeyboardButton(text="üìö –î—Ä—É–≥–∏–µ –∫—É—Ä—Å—ã", callback_data="courses_other"))
    nav.append(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_menu"))
    rows.append(nav)

    return InlineKeyboardMarkup(inline_keyboard=rows)

def labs_kb(labs: Sequence[str], course_id: str) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–ø–∏—Å–∫–∞ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω—ã—Ö"""
    rows = [
        [InlineKeyboardButton(text=lab, callback_data=f"lab_{course_id}_{lab}")]
        for lab in labs
    ]
    rows.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="courses_back")])
    return InlineKeyboardMarkup(inline_keyboard=rows)

def home_kb() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –¥–æ–º–æ–π"""
    return InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_menu")]]
    )