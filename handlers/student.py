import logging
from aiogram import Router, F
from aiogram.types import CallbackQuery, Message
from aiogram.fsm.context import FSMContext
from aiogram.exceptions import TelegramNotFound, TelegramBadRequest, TelegramForbiddenError

from states.reg import Reg
from keyboards.common import nav_kb, confirm_kb, main_menu_kb
from keyboards.common import start_kb
from services.student import StudentRepository, Student

logger = logging.getLogger(__name__)
router = Router()

PROMPTS = {
    Reg.SURNAME: "–í–≤–µ–¥–∏ —Ñ–∞–º–∏–ª–∏—é",
    Reg.NAME: "–í–≤–µ–¥–∏ –∏–º—è",
    Reg.PATRONYMIC: "–í–≤–µ–¥–∏ –æ—Ç—á–µ—Å—Ç–≤–æ\n(–µ—Å–ª–∏ –Ω–µ—Ç ‚Äî –Ω–∞–ø–∏—à–∏ ¬´-¬ª)",
    Reg.GROUP: "–í–≤–µ–¥–∏ –≥—Ä—É–ø–ø—É",
    Reg.GITHUB: "–í–≤–µ–¥–∏ GitHub",
}
ORDER = [Reg.SURNAME, Reg.NAME, Reg.PATRONYMIC, Reg.GROUP, Reg.GITHUB]
PREV = {ORDER[i + 1]: ORDER[i] for i in range(len(ORDER) - 1)}

BOT_MSG_KEY = "__bot_msg_id"


def normalize_fio(text: str) -> str:
    """–ü—Ä–∏–≤–µ–¥–µ–Ω–∏–µ –§–ò–û –∫ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–º—É —Ñ–æ—Ä–º–∞—Ç—É"""
    return text.strip().title()


async def _cleanup_prev(state: FSMContext, chat_id: int, bot):
    """–£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞"""
    data = await state.get_data()
    msg_id = data.get(BOT_MSG_KEY)
    if msg_id:
        try:
            await bot.delete_message(chat_id, msg_id)
        except (TelegramNotFound, TelegramBadRequest, TelegramForbiddenError):
            pass


async def _send(state: FSMContext, message_or_cb, text: str, kb):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è"""
    bot = message_or_cb.bot
    if isinstance(message_or_cb, CallbackQuery):
        chat_id = message_or_cb.message.chat.id
    else:
        chat_id = message_or_cb.chat.id
    
    try:
        await _cleanup_prev(state, chat_id, bot)
        sent = await bot.send_message(chat_id, text, reply_markup=kb)
        await state.update_data({BOT_MSG_KEY: sent.message_id})
    except Exception as e:
        logger.error(f"Error in _send for chat {chat_id}: {e}")
        # Fallback: –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
        try:
            await bot.send_message(chat_id, text, reply_markup=kb)
        except Exception as fallback_error:
            logger.error(f"Fallback send also failed: {fallback_error}")


@router.callback_query(F.data == "reg_start")
async def reg_start(cb: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
    logger.info(f"User {cb.message.chat.id} started registration")
    await state.clear()
    await state.set_state(Reg.SURNAME)

    await cb.message.delete()
    await _send(state, cb, PROMPTS[Reg.SURNAME], nav_kb(include_back=False))
    await cb.answer()


@router.message(Reg.SURNAME, F.text)
@router.message(Reg.NAME, F.text)
@router.message(Reg.PATRONYMIC, F.text)
@router.message(Reg.GROUP, F.text)
@router.message(Reg.GITHUB, F.text)
async def reg_steps(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —à–∞–≥–æ–≤ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
    await message.delete()

    cur_state = await state.get_state()
    text = message.text.strip()
    logger.info(f"User {message.chat.id} entered {cur_state}: {text}")

    if cur_state in [Reg.SURNAME.state, Reg.NAME.state, Reg.PATRONYMIC.state]:
        text = normalize_fio(text)

    data = await state.get_data()
    data[cur_state] = text
    await state.update_data(data)

    cur = next(s for s in ORDER if s.state == cur_state)
    if cur != Reg.GITHUB:
        nxt = ORDER[ORDER.index(cur) + 1]
        await state.set_state(nxt)
        await _send(state, message, PROMPTS[nxt], nav_kb())
        return

    await state.set_state(Reg.CONFIRM)
    s = data
    summary = (
        f"<b>{s[Reg.SURNAME.state]} {s[Reg.NAME.state]} {s[Reg.PATRONYMIC.state]}</b>\n"
        f"–ì—Ä—É–ø–ø–∞: {s[Reg.GROUP.state]}\nGitHub: {s[Reg.GITHUB.state]}"
    )
    logger.info(f"User {message.chat.id} completed registration form")
    await _send(state, message, summary, confirm_kb())


@router.callback_query(F.data == "reg_back")
async def reg_back(cb: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É —à–∞–≥—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
    logger.info(f"User {cb.message.chat.id} going back in registration")
    cur_state = await state.get_state()
    prev = PREV.get(next(s for s in ORDER if s.state == cur_state))
    if not prev:
        await cb.answer()
        return

    await cb.message.delete()
    data = await state.get_data()
    data.pop(BOT_MSG_KEY, None)
    await state.update_data(data)

    await state.set_state(prev)
    await _send(
        state,
        cb,
        PROMPTS[prev],
        nav_kb(include_back=prev != Reg.SURNAME),
    )
    await cb.answer()


@router.callback_query(F.data == "reg_restart")
async def reg_restart(cb: CallbackQuery, state: FSMContext):
    """–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
    logger.info(f"User {cb.message.chat.id} restarted registration")
    await state.clear()

    await cb.message.delete()
    await _cleanup_prev(state, cb.message.chat.id, cb.bot)
    sent = await cb.message.answer(
        "–ù–∞—á–Ω—ë–º –∑–∞–Ω–æ–≤–æ. –ñ–º–∏ ¬´–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è¬ª",
        reply_markup=start_kb(),
    )
    await state.update_data({BOT_MSG_KEY: sent.message_id})
    await cb.answer()


@router.callback_query(F.data == "reg_confirm")
async def reg_confirm(cb: CallbackQuery, state: FSMContext, students_repo: StudentRepository):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
    logger.info(f"User {cb.message.chat.id} confirming registration")
    data = await state.get_data()
    await state.clear()

    student = Student(
        chat_id=cb.message.chat.id,
        surname=data[Reg.SURNAME.state],
        name=data[Reg.NAME.state],
        patronymic=None if data[Reg.PATRONYMIC.state] == "-" else data[Reg.PATRONYMIC.state],
        group_code=data[Reg.GROUP.state],
        github=data[Reg.GITHUB.state],
    )
    
    try:
        await students_repo.save(student)
        logger.info(f"User {cb.message.chat.id} successfully registered")

        await cb.message.delete()
        await cb.message.answer("‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞\n\nüè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=main_menu_kb())
    except ValueError as e:
        logger.warning(f"Registration failed for user {cb.message.chat.id}: {e}")
        await cb.message.delete()
        await cb.message.answer(
            "‚ùå –°—Ç—É–¥–µ–Ω—Ç —Å —Ç–∞–∫–∏–º–∏ –∂–µ –¥–∞–Ω–Ω—ã–º–∏ —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ —Å–∏—Å—Ç–µ–º–µ.\n\n"
            "–ï—Å–ª–∏ —ç—Ç–æ –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ, –Ω–æ –≤—ã –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ –¥—Ä—É–≥–æ–π Telegram –∞–∫–∫–∞—É–Ω—Ç, "
            "–ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
            reply_markup=start_kb()
        )
    except Exception as e:
        logger.error(f"Unexpected error during registration for user {cb.message.chat.id}: {e}")
        await cb.message.delete()
        await cb.message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=start_kb()
        )
    
    await cb.answer()