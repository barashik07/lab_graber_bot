import datetime, aiosqlite, aiohttp
import contextlib
import logging

from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.exceptions import TelegramBadRequest, TelegramNotFound
from services.admin import AdminAPI, AdminSessionRepo
from services.student import StudentRepository
from states.admin import AdminLogin, AdminMenu
from keyboards.admin import *

logger = logging.getLogger(__name__)
router = Router()
BOT_MSG_KEY = "__bot_msg_id"


async def _cleanup_prev(state: FSMContext, chat_id: int, bot):
    """–£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞"""
    data = await state.get_data()
    msg_id = data.get(BOT_MSG_KEY)
    if msg_id:
        with contextlib.suppress(Exception):
            await bot.delete_message(chat_id, msg_id)

async def _send(state: FSMContext, obj, text: str, kb):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è"""
    bot, chat_id = obj.bot, (obj.message.chat.id if isinstance(obj, CallbackQuery) else obj.chat.id)
    
    try:
        await _cleanup_prev(state, chat_id, bot)
        m = await bot.send_message(
            chat_id, 
            text, 
            reply_markup=kb,
            parse_mode="HTML",
            disable_web_page_preview=True
        )
        await state.update_data({BOT_MSG_KEY: m.message_id})
    except Exception as e:
        logger.error(f"Error in _send for chat {chat_id}: {e}")
        try:
            await bot.send_message(chat_id, text, reply_markup=kb, parse_mode="HTML")
        except Exception as fallback_error:
            logger.error(f"Fallback send also failed: {fallback_error}")


@router.message(F.text.lower() == "/admin")
async def admin_entry(msg: Message, state: FSMContext):
    """–í—Ö–æ–¥ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å"""
    logger.info(f"Admin entry attempt from user {msg.chat.id}")
    try:
        await msg.delete()
    except (TelegramBadRequest, TelegramNotFound):
        pass
    await state.clear()
    await state.set_state(AdminLogin.LOGIN)
    await _send(state, msg, "–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω", login_back_kb())


@router.message(AdminLogin.LOGIN)
async def admin_login_step(msg: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –ª–æ–≥–∏–Ω–∞"""
    logger.info(f"Admin login step from user {msg.chat.id}")
    await msg.delete()
    await state.update_data(login=msg.text.strip())
    await state.set_state(AdminLogin.PASSWORD)
    await _send(state, msg, "–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å", login_back_kb())


@router.message(AdminLogin.PASSWORD)
async def admin_password_step(msg: Message, state: FSMContext, db: aiosqlite.Connection):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –ø–∞—Ä–æ–ª—è"""
    logger.info(f"Admin password step from user {msg.chat.id}")
    await msg.delete()
    data = await state.get_data()
    login, pwd = data["login"], msg.text.strip()

    async with aiohttp.ClientSession() as s:
        api = AdminAPI(s)
        cookie = await api.login(login, pwd)

    if not cookie:
        logger.warning(f"Admin login failed for user {msg.chat.id}")
        await _send(state, msg, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑", login_back_kb())
        return

    repo = AdminSessionRepo(db)
    await repo.ensure_table()
    await repo.save_cookie(cookie)
    logger.info(f"Admin login successful for user {msg.chat.id}")

    await state.set_state(AdminMenu.MAIN)
    await _send(state, msg, "üîß –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", admin_main_kb())


@router.callback_query(F.data == "admin_cancel")
async def admin_cancel(cb: CallbackQuery, state: FSMContext, db: aiosqlite.Connection):
    """–û—Ç–º–µ–Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏"""
    logger.info(f"Admin cancel operation from user {cb.message.chat.id}")
    current_state = await state.get_state()
    
    if current_state == AdminMenu.CONFIRM:
        data = await state.get_data()
        if "cur_group" in data:
            group = data["cur_group"]
            repo = StudentRepository(db)
            students = sorted([f"{s.surname} {s.name} {s.patronymic or ''}".strip() for s in await repo.by_group(group)])
            await state.update_data(cur_group=group, students=students)
            await state.set_state(AdminMenu.STUDENTS)
            await _send(state, cb, f"üë• {group}: —Å—Ç—É–¥–µ–Ω—Ç—ã", students_kb(students, group))
        elif "cur_course_id" in data:
            if await _ensure_admin(cb, db):
                repo = AdminSessionRepo(db)
                cookie_data = await repo.get_cookie()
                if cookie_data:
                    cookie, _ = cookie_data
                    async with aiohttp.ClientSession() as s:
                        courses = await AdminAPI(s).list_courses(cookie)
                    await state.set_state(AdminMenu.COURSES)
                    await _send(state, cb, "üìö –ö—É—Ä—Å—ã:", courses_kb(courses))
                else:
                    await state.set_state(AdminMenu.MAIN)
                    await _send(state, cb, "üîß –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", admin_main_kb())
            else:
                await state.set_state(AdminMenu.MAIN)
                await _send(state, cb, "üîß –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", admin_main_kb())
        else:
            await state.set_state(AdminMenu.MAIN)
            await _send(state, cb, "üîß –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", admin_main_kb())
    else:
        await state.clear()
        await cb.message.delete()
    
    await cb.answer()


@router.callback_query(F.data == "admin_logout")
async def admin_logout(cb: CallbackQuery, db: aiosqlite.Connection):
    """–í—ã—Ö–æ–¥ –∏–∑ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏"""
    logger.info(f"Admin logout from user {cb.message.chat.id}")
    repo = AdminSessionRepo(db)
    cookie_data = await repo.get_cookie()
    if cookie_data:
        cookie, _ = cookie_data
        async with aiohttp.ClientSession() as s:
            await AdminAPI(s).logout(cookie)
    await repo.clear()
    await cb.message.delete()
    await cb.answer("‚úÖ –°–µ—Å—Å–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞")


async def _ensure_admin(cb: CallbackQuery, db: aiosqlite.Connection) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    repo = AdminSessionRepo(db)
    cookie_data = await repo.get_cookie()
    if not cookie_data:
        logger.warning(f"Admin session not found for user {cb.message.chat.id}")
        await cb.answer("‚ö†Ô∏è –ù—É–∂–Ω–æ –≤–æ–π—Ç–∏ –∑–∞–Ω–æ–≤–æ", show_alert=True)
        return False
    cookie, expires = cookie_data
    if datetime.datetime.fromisoformat(expires) <= datetime.datetime.utcnow():
        logger.warning(f"Admin session expired for user {cb.message.chat.id}")
        await repo.clear()
        await cb.answer("‚è∞ –°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞", show_alert=True)
        return False
    return True


@router.callback_query(F.data == "admin_groups")
async def admin_groups(cb: CallbackQuery, db: aiosqlite.Connection, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø"""
    logger.info(f"Admin viewing groups from user {cb.message.chat.id}")
    if not await _ensure_admin(cb, db):
        return
    repo = StudentRepository(db)
    groups = sorted({st.group_code for st in await repo.all()})
    await state.set_state(AdminMenu.GROUPS)
    await _send(state, cb, "üë• –ì—Ä—É–ø–ø—ã:", groups_kb(groups))
    await cb.answer()


@router.callback_query(F.data.startswith("adm_group_"))
async def admin_group_open(cb: CallbackQuery, db: aiosqlite.Connection, state: FSMContext):
    """–û—Ç–∫—Ä—ã—Ç—å –≥—Ä—É–ø–ø—É —Å—Ç—É–¥–µ–Ω—Ç–æ–≤"""
    group = "_".join(cb.data.split("_")[2:])
    logger.info(f"Admin viewing group {group} from user {cb.message.chat.id}")
    repo = StudentRepository(db)
    students = sorted([f"{s.surname} {s.name} {s.patronymic or ''}".strip() for s in await repo.by_group(group)])
    await state.update_data(cur_group=group, students=students)
    await state.set_state(AdminMenu.STUDENTS)
    await _send(state, cb, f"üë• {group}: —Å—Ç—É–¥–µ–Ω—Ç—ã", students_kb(students, group))
    await cb.answer()


@router.callback_query(F.data == "admin_back_groups")
async def back_groups(cb: CallbackQuery, db: aiosqlite.Connection, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ —Å–ø–∏—Å–∫—É –≥—Ä—É–ø–ø"""
    logger.info(f"Admin back to groups from user {cb.message.chat.id}")
    repo = StudentRepository(db)
    groups = sorted({st.group_code for st in await repo.all()})
    await state.set_state(AdminMenu.GROUPS)
    await _send(state, cb, "üë• –ì—Ä—É–ø–ø—ã:", groups_kb(groups))
    await cb.answer()


@router.callback_query(F.data.startswith("adm_back_students_"))
async def back_students(cb: CallbackQuery, db: aiosqlite.Connection, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ —Å–ø–∏—Å–∫—É —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –≥—Ä—É–ø–ø—ã"""
    group = "_".join(cb.data.split("_")[3:])
    logger.info(f"Admin back to students of group {group} from user {cb.message.chat.id}")
    repo = StudentRepository(db)
    students = sorted([f"{s.surname} {s.name} {s.patronymic or ''}".strip() for s in await repo.by_group(group)])
    await state.update_data(cur_group=group, students=students)
    await state.set_state(AdminMenu.STUDENTS)
    await _send(state, cb, f"üë• {group}: —Å—Ç—É–¥–µ–Ω—Ç—ã", students_kb(students, group))
    await cb.answer()


@router.callback_query(F.data == "empty_list")
async def empty_list_callback(cb: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—É—Å—Ç–æ–≥–æ —Å–ø–∏—Å–∫–∞"""
    logger.info(f"Empty list callback from user {cb.message.chat.id}")
    await cb.answer("üì≠ –°–ø–∏—Å–æ–∫ –ø—É—Å—Ç", show_alert=True)


@router.callback_query(F.data == "admin_back")
async def back_to_main(cb: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏"""
    logger.info(f"Admin back to main menu from user {cb.message.chat.id}")
    await state.set_state(AdminMenu.MAIN)
    await _send(state, cb, "üîß –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", admin_main_kb())
    await cb.answer()


@router.callback_query(F.data.startswith("adm_student_"))
async def admin_student(cb: CallbackQuery, db: aiosqlite.Connection, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç—É–¥–µ–Ω—Ç–µ"""
    parts = cb.data.split("_")
    idx = int(parts[-1])
    group = "_".join(parts[2:-1])
    students = (await state.get_data())["students"]
    fio = students[idx]
    logger.info(f"Admin viewing student {fio} from group {group}")

    repo = StudentRepository(db)
    student = await repo.get_by_fio(group, fio)
    text = (
        f"<b>üë§ {fio}</b>\n"
        f"üéì –ì—Ä—É–ø–ø–∞: {student.group_code}\nüîó GitHub: {student.github}\n"
        f"üìö –ö—É—Ä—Å—ã: {', '.join(f'{c.name} ({c.semester})' for c in student.courses) or '‚Äî'}"
    )
    await state.set_state(AdminMenu.STUDENT_INFO)
    await state.update_data(sel_idx=idx)
    await _send(state, cb, text, student_info_kb(group, idx))
    await cb.answer()


@router.callback_query(F.data == "adm_del_st_yes_confirm")
async def del_student(cb: CallbackQuery, db: aiosqlite.Connection, state: FSMContext):
    """–£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç—É–¥–µ–Ω—Ç–∞"""
    data = await state.get_data()
    
    if "cur_group" not in data or "del_student_idx" not in data:
        logger.error(f"Missing data for student deletion from user {cb.message.chat.id}")
        await cb.answer("‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return
    
    group = data["cur_group"]
    idx = data["del_student_idx"]
    
    repo = StudentRepository(db)
    students = await repo.by_group(group)
    
    if idx < len(students):
        target = students[idx]
        await repo.delete_student(target.id)
        logger.info(f"Admin deleted student {target.surname} {target.name} from group {group}")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤
        students = sorted([f"{s.surname} {s.name} {s.patronymic or ''}".strip() for s in await repo.by_group(group)])
        await state.update_data(cur_group=group, students=students)
        await state.set_state(AdminMenu.STUDENTS)
        await _send(state, cb, f"üë• {group}: —Å—Ç—É–¥–µ–Ω—Ç—ã", students_kb(students, group))
    else:
        logger.error(f"Student index {idx} out of range for group {group}")
        await cb.answer("‚ùå –û—à–∏–±–∫–∞: —Å—Ç—É–¥–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    await cb.answer()


@router.callback_query(F.data.startswith("adm_del_st_") & ~F.data.startswith("adm_del_st_yes_"))
async def confirm_del_student(cb: CallbackQuery, state: FSMContext):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è —Å—Ç—É–¥–µ–Ω—Ç–∞"""
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ callback: adm_del_st_4231_0 -> group=4231, idx=0
    parts = cb.data.split("_")
    if len(parts) >= 5:
        group = parts[3]
        idx = int(parts[4])
    else:
        logger.error(f"Invalid callback data for student deletion: {cb.data}")
        await cb.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
        return
    
    students = (await state.get_data())["students"]
    if idx < len(students):
        fio = students[idx]
        logger.info(f"Admin confirming deletion of student {fio} from group {group}")
        
        await state.update_data(del_student_idx=idx)
        await state.set_state(AdminMenu.CONFIRM)
        await _send(state, cb, f"‚ùì –£–¥–∞–ª–∏—Ç—å —Å—Ç—É–¥–µ–Ω—Ç–∞ {fio}?", confirm_kb(f"adm_del_st_yes_confirm"))
    else:
        logger.error(f"Student index {idx} out of range")
        await cb.answer("‚ùå –û—à–∏–±–∫–∞: —Å—Ç—É–¥–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    await cb.answer()


@router.callback_query(F.data.startswith("adm_del_group_") & ~F.data.startswith("adm_del_group_yes_"))
async def confirm_del_group(cb: CallbackQuery, state: FSMContext):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –≥—Ä—É–ø–ø—ã"""
    # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –≥—Ä—É–ø–ø—ã –∏–∑ callback –¥–∞–Ω–Ω—ã—Ö
    # adm_del_group_4231 -> 4231
    group = cb.data.replace("adm_del_group_", "")
    logger.info(f"Admin confirming deletion of group {group}")
    
    await state.update_data(del_group=group)
    await state.set_state(AdminMenu.CONFIRM)
    await _send(state, cb, f"‚ùì –£–¥–∞–ª–∏—Ç—å –≥—Ä—É–ø–ø—É {group}?", confirm_kb(f"adm_del_group_yes_{group}"))
    await cb.answer()


@router.callback_query(F.data.startswith("adm_del_group_yes_"))
async def del_group(cb: CallbackQuery, db: aiosqlite.Connection, state: FSMContext):
    """–£–¥–∞–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø—ã"""
    # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –≥—Ä—É–ø–ø—ã –∏–∑ callback –¥–∞–Ω–Ω—ã—Ö
    # adm_del_group_yes_4231 -> 4231
    group = cb.data.replace("adm_del_group_yes_", "")
    logger.info(f"Admin deleting group {group}")
    
    repo = StudentRepository(db)
    await repo.delete_group(group)
    
    await state.set_state(AdminMenu.GROUPS)
    groups = sorted({st.group_code for st in await repo.all()})
    await _send(state, cb, "üë• –ì—Ä—É–ø–ø—ã:", groups_kb(groups))
    await cb.answer()


@router.callback_query(F.data == "admin_courses")
async def admin_courses(cb: CallbackQuery, state: FSMContext, db: aiosqlite.Connection):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∫—É—Ä—Å–æ–≤"""
    logger.info(f"Admin viewing courses from user {cb.message.chat.id}")
    if not await _ensure_admin(cb, db):
        return
    
    repo = AdminSessionRepo(db)
    cookie_data = await repo.get_cookie()
    if not cookie_data:
        logger.warning(f"Admin session not found for courses view")
        await cb.answer("‚ö†Ô∏è –ù—É–∂–Ω–æ –≤–æ–π—Ç–∏ –∑–∞–Ω–æ–≤–æ", show_alert=True)
        return
    
    cookie, _ = cookie_data
    async with aiohttp.ClientSession() as s:
        courses = await AdminAPI(s).list_courses(cookie)
    
    await state.set_state(AdminMenu.COURSES)
    await _send(state, cb, "üìö –ö—É—Ä—Å—ã:", courses_kb(courses))
    await cb.answer()


@router.callback_query(F.data == "admin_back_courses")
async def back_courses(cb: CallbackQuery, state: FSMContext, db: aiosqlite.Connection):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ —Å–ø–∏—Å–∫—É –∫—É—Ä—Å–æ–≤"""
    logger.info(f"Admin back to courses from user {cb.message.chat.id}")
    if not await _ensure_admin(cb, db):
        return
    
    repo = AdminSessionRepo(db)
    cookie_data = await repo.get_cookie()
    if not cookie_data:
        logger.warning(f"Admin session not found for courses back")
        await cb.answer("‚ö†Ô∏è –ù—É–∂–Ω–æ –≤–æ–π—Ç–∏ –∑–∞–Ω–æ–≤–æ", show_alert=True)
        return
    
    cookie, _ = cookie_data
    async with aiohttp.ClientSession() as s:
        courses = await AdminAPI(s).list_courses(cookie)
    
    await state.set_state(AdminMenu.COURSES)
    await _send(state, cb, "üìö –ö—É—Ä—Å—ã:", courses_kb(courses))
    await cb.answer()


@router.callback_query(F.data.startswith("adm_course_del_") & ~F.data.startswith("adm_course_del_yes_"))
async def confirm_course_del(cb: CallbackQuery, state: FSMContext, db: aiosqlite.Connection):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –∫—É—Ä—Å–∞"""
    # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –∫—É—Ä—Å–∞ –∏–∑ callback –¥–∞–Ω–Ω—ã—Ö
    # adm_course_del_1 -> 1
    course_id = cb.data.replace("adm_course_del_", "")
    logger.info(f"Admin confirming deletion of course {course_id}")
    
    await state.update_data(del_course_id=course_id)
    await state.set_state(AdminMenu.CONFIRM)
    await _send(state, cb, f"‚ùì –£–¥–∞–ª–∏—Ç—å –∫—É—Ä—Å {course_id}?", confirm_kb(f"adm_course_del_yes_{course_id}"))
    await cb.answer()


@router.callback_query(F.data.startswith("adm_course_del_yes_"))
async def do_course_del(cb: CallbackQuery, state: FSMContext, db: aiosqlite.Connection):
    """–£–¥–∞–ª–µ–Ω–∏–µ –∫—É—Ä—Å–∞"""
    # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –∫—É—Ä—Å–∞ –∏–∑ callback –¥–∞–Ω–Ω—ã—Ö
    # adm_course_del_yes_1 -> 1
    course_id = cb.data.replace("adm_course_del_yes_", "")
    logger.info(f"Admin deleting course {course_id}")
    
    repo = AdminSessionRepo(db)
    cookie_data = await repo.get_cookie()
    if not cookie_data:
        logger.warning(f"Admin session not found for course deletion")
        await cb.answer("‚ö†Ô∏è –ù—É–∂–Ω–æ –≤–æ–π—Ç–∏ –∑–∞–Ω–æ–≤–æ", show_alert=True)
        return
    
    cookie, _ = cookie_data
    async with aiohttp.ClientSession() as s:
        api = AdminAPI(s)
        success = await api.delete_course(cookie, course_id)
    
    if success:
        logger.info(f"Course {course_id} deleted successfully")
        courses = await api.list_courses(cookie)
        await state.set_state(AdminMenu.COURSES)
        await _send(state, cb, "üìö –ö—É—Ä—Å—ã:", courses_kb(courses))
    else:
        logger.error(f"Failed to delete course {course_id}")
        await cb.answer("‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫—É—Ä—Å–∞", show_alert=True)
    
    await cb.answer()


@router.callback_query(F.data == "adm_course_add")
async def add_course_start(cb: CallbackQuery, state: FSMContext, db: aiosqlite.Connection):
    """–ù–∞—á–∞–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫—É—Ä—Å–∞"""
    logger.info(f"Admin starting course addition from user {cb.message.chat.id}")
    if not await _ensure_admin(cb, db):
        return
    
    await state.set_state(AdminMenu.EDIT)
    await _send(state, cb, "üì§ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –∫—É—Ä—Å–∞", InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_back_courses")]]
    ))
    await cb.answer()


@router.callback_query(F.data.startswith("adm_course_"))
async def course_info(cb: CallbackQuery, state: FSMContext, db: aiosqlite.Connection):
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫—É—Ä—Å–µ"""
    course_id = cb.data.split("_")[-1]
    logger.info(f"Admin viewing course {course_id} info")
    
    repo = AdminSessionRepo(db)
    cookie_data = await repo.get_cookie()
    if not cookie_data:
        logger.warning(f"Admin session not found for course info")
        await cb.answer("‚ö†Ô∏è –ù—É–∂–Ω–æ –≤–æ–π—Ç–∏ –∑–∞–Ω–æ–≤–æ", show_alert=True)
        return
    
    cookie, _ = cookie_data
    async with aiohttp.ClientSession() as s:
        api = AdminAPI(s)
        course_info = await api.get_course_info(cookie, course_id)
    
    if course_info:
        name = course_info.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
        semester = course_info.get('semester', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
        github_org = course_info.get('github-organization', '–ù–µ —É–∫–∞–∑–∞–Ω')
        spreadsheet_id = course_info.get('google-spreadsheet', '–ù–µ —É–∫–∞–∑–∞–Ω')
        
        github_link = f"https://github.com/{github_org}" if github_org != '–ù–µ —É–∫–∞–∑–∞–Ω' else '–ù–µ —É–∫–∞–∑–∞–Ω'
        spreadsheet_link = f"https://docs.google.com/spreadsheets/d/{spreadsheet_id}" if spreadsheet_id != '–ù–µ —É–∫–∞–∑–∞–Ω' else '–ù–µ —É–∫–∞–∑–∞–Ω'
        
        text = (
            f"<b>üìö {name} ({semester})</b>\n"
            f"üîó GitHub: <a href=\"{github_link}\">{github_org}</a>\n"
            f"üìä –¢–∞–±–ª–∏—Ü–∞: <a href=\"{spreadsheet_link}\">{spreadsheet_id}</a>"
        )
    else:
        text = f"<b>üìö –ö—É—Ä—Å {course_id}</b>\n–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"
    
    await state.set_state(AdminMenu.COURSE_INFO)
    await state.update_data(cur_course_id=course_id)
    await _send(state, cb, text, course_actions_kb(course_id))
    await cb.answer()


@router.message(AdminMenu.EDIT, F.document)
async def upload_new_course(msg: Message, state: FSMContext, db: aiosqlite.Connection):
    """–ó–∞–≥—Ä—É–∑–∫–∞ –Ω–æ–≤–æ–≥–æ –∫—É—Ä—Å–∞"""
    logger.info(f"Admin uploading course file from user {msg.chat.id}")
    if not await _ensure_admin(msg, db):
        return
    
    repo = AdminSessionRepo(db)
    cookie_data = await repo.get_cookie()
    if not cookie_data:
        logger.warning(f"Admin session not found for course upload")
        await msg.answer("‚ö†Ô∏è –ù—É–∂–Ω–æ –≤–æ–π—Ç–∏ –∑–∞–Ω–æ–≤–æ")
        return
    
    cookie, _ = cookie_data
    file_id = msg.document.file_id
    file_info = await msg.bot.get_file(file_id)
    file_url = f"https://api.telegram.org/file/bot{msg.bot.token}/{file_info.file_path}"
    
    async with aiohttp.ClientSession() as s:
        api = AdminAPI(s)
        success = await api.upload_course(cookie, file_url, msg.document.file_name)
    
    if success:
        logger.info(f"Course uploaded successfully by user {msg.chat.id}")
        courses = await api.list_courses(cookie)
        await state.set_state(AdminMenu.COURSES)
        await _send(state, msg, "üìö –ö—É—Ä—Å—ã:", courses_kb(courses))
    else:
        logger.error(f"Course upload failed for user {msg.chat.id}")
        await msg.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫—É—Ä—Å–∞")
    
    await msg.delete()


@router.message(AdminMenu.EDIT)
async def cancel_course_upload(msg: Message, state: FSMContext, db: aiosqlite.Connection):
    """–û—Ç–º–µ–Ω–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫—É—Ä—Å–∞"""
    logger.info(f"Admin cancelled course upload from user {msg.chat.id}")
    await msg.delete()
    await state.set_state(AdminMenu.COURSES)
    
    repo = AdminSessionRepo(db)
    cookie_data = await repo.get_cookie()
    if cookie_data:
        cookie, _ = cookie_data
        async with aiohttp.ClientSession() as s:
            courses = await AdminAPI(s).list_courses(cookie)
        await _send(state, msg, "üìö –ö—É—Ä—Å—ã:", courses_kb(courses))
    else:
        await _send(state, msg, "üîß –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", admin_main_kb())