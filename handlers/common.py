import logging
from aiogram import Router, F
from aiogram.filters import CommandStart
from aiogram.types import Message, CallbackQuery
from aiogram.exceptions import TelegramBadRequest, TelegramNotFound
from aiogram.utils.markdown import bold
from html import escape as quote_html

import asyncio
import aiohttp

from keyboards.common import start_kb, main_menu_kb, back_menu_kb, home_kb
from keyboards.common import courses_kb, labs_kb
from services.student import StudentRepository
from services.api import APIClient
from utils.semester import current_semester
from models.student import CourseRef

logger = logging.getLogger(__name__)
router = Router()


@router.message(CommandStart())
async def cmd_start(message: Message, students_repo: StudentRepository):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start"""
    logger.info(f"Start command from user {message.chat.id}")
    try:
        await message.delete()
    except (TelegramBadRequest, TelegramNotFound):
        pass
    student = await students_repo.get_by_chat(message.chat.id)

    if student:
        logger.info(f"User {message.chat.id} already registered")
        await message.answer("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=main_menu_kb())
    else:
        logger.info(f"New user {message.chat.id} needs registration")
        await message.answer(
            "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –î–ª—è —Ä–∞–±–æ—Ç—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è",
            reply_markup=start_kb(),
        )


@router.callback_query(F.data == "menu_info")
async def show_info(cb: CallbackQuery, students_repo: StudentRepository):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç—É–¥–µ–Ω—Ç–µ"""
    logger.info(f"User {cb.message.chat.id} requested info")
    student = await students_repo.get_by_chat(cb.message.chat.id)
    if not student:
        logger.warning(f"User {cb.message.chat.id} not found in database")
        await cb.answer("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
        return
    txt = (
        f"<b>{student.surname} {student.name} {student.patronymic or ''}</b>\n"
        f"–ì—Ä—É–ø–ø–∞: {student.group_code}\nGitHub: {student.github}"
    )
    await cb.message.delete()
    await cb.message.answer(txt, reply_markup=back_menu_kb())
    await cb.answer()


@router.callback_query(F.data == "back_menu")
async def back_to_menu(cb: CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    logger.info(f"User {cb.message.chat.id} returned to main menu")
    await cb.message.delete()
    await cb.message.answer("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=main_menu_kb())
    await cb.answer()

@router.callback_query(F.data == "menu_choose_course")
async def choose_course(cb: CallbackQuery, api: APIClient):
    """–í—ã–±–æ—Ä –∫—É—Ä—Å–∞"""
    logger.info(f"User {cb.message.chat.id} choosing course")
    await _show_active_courses(cb, api)

@router.callback_query(F.data == "courses_back")
async def courses_back(cb: CallbackQuery, api: APIClient):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ —Å–ø–∏—Å–∫—É –∫—É—Ä—Å–æ–≤"""
    logger.info(f"User {cb.message.chat.id} returned to courses list")
    await _show_active_courses(cb, api)

async def _show_active_courses(cb: CallbackQuery, api: APIClient) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –∫—É—Ä—Å—ã"""
    logger.info(f"Showing active courses for user {cb.message.chat.id}")
    courses = await api.get_courses()
    sem = current_semester()

    active = [c for c in courses if c.semester == sem]
    other = [c for c in courses if c.semester != sem]

    await cb.message.delete()
    await cb.message.answer(
        f"<b>üìö –ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –∫—É—Ä—Å—ã\n({sem})</b>",
        reply_markup=courses_kb(active, add_other=bool(other)),
    )
    await cb.answer()

@router.callback_query(F.data == "courses_other")
async def courses_other(cb: CallbackQuery, api: APIClient):
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥—Ä—É–≥–∏–µ –∫—É—Ä—Å—ã"""
    logger.info(f"User {cb.message.chat.id} viewing other courses")
    courses = await api.get_courses()
    sem = current_semester()
    other = [c for c in courses if c.semester != sem]

    await cb.message.delete()
    await cb.message.answer(
        "<b>üìö –î—Ä—É–≥–∏–µ –∫—É—Ä—Å—ã</b>",
        reply_markup=courses_kb(other, add_other=False),
    )
    await cb.answer()

@router.callback_query(F.data.startswith("course_"))
async def course_selected(
    cb: CallbackQuery,
    api: APIClient,
    students_repo: StudentRepository,
):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫—É—Ä—Å–∞"""
    course_id = cb.data.split("_", 1)[1]
    logger.info(f"User {cb.message.chat.id} selected course {course_id}")
    courses_all = await api.get_courses()
    course = next((c for c in courses_all if str(c.id) == course_id), None)
    if not course:
        logger.warning(f"Course {course_id} not found")
        await cb.answer("‚ùå –ö—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return

    student = await students_repo.get_by_chat(cb.message.chat.id)
    if not student:
        logger.warning(f"User {cb.message.chat.id} not registered")
        await cb.answer("‚ö†Ô∏è –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è", show_alert=True)
        return

    if any(cr.name == course.name and cr.semester == course.semester for cr in student.courses):
        logger.info(f"User {cb.message.chat.id} already registered for course {course_id}")
        registered = True
    else:
        logger.info(f"Registering user {cb.message.chat.id} for course {course_id}")
        payload = {
            "name": student.name,
            "surname": student.surname,
            "patronymic": student.patronymic,
            "github": student.github,
        }
        result = await api.register_student(course_id, student.group_code, payload)
        if not result:
            logger.error(f"Failed to register user {cb.message.chat.id} for course {course_id}")
            await cb.answer("‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞", show_alert=True)
            return
        status = result.get("status")
        if status not in ("registered", "already_registered"):
            logger.error(f"Registration failed for user {cb.message.chat.id}, status: {status}")
            await cb.answer(result.get("message", "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–≤—è–∑–∞—Ç—å –∫—É—Ä—Å"), show_alert=True)
            return

        student.courses.append(CourseRef(name=course.name, semester=course.semester))
        await students_repo.save(student)
        logger.info(f"User {cb.message.chat.id} successfully registered for course {course_id}")
        registered = True

    if registered:
        groups = await api.get_groups(course_id)
        if student.group_code not in groups:
            logger.warning(f"Course {course_id} not available for group {student.group_code}")
            await cb.answer("‚ö†Ô∏è –≠—Ç–æ—Ç –∫—É—Ä—Å –Ω–µ –¥–ª—è —Ç–≤–æ–µ–π –≥—Ä—É–ø–ø—ã", show_alert=True)
            return

        labs = await api.get_labs(course_id, student.group_code)
        if not labs:
            logger.info(f"No labs available for course {course_id}, group {student.group_code}")
            await cb.answer("üì≠ –î–ª—è —Ç–≤–æ–µ–π –≥—Ä—É–ø–ø—ã –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω—ã—Ö –Ω–µ—Ç", show_alert=True)
            return

        # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫—É—Ä—Å–µ
        course_info = await api.get_course_info(course_id)
        
        if course_info:
            name = course_info.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
            semester = course_info.get('semester', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
            github_org = course_info.get('github-organization', '–ù–µ —É–∫–∞–∑–∞–Ω')
            spreadsheet_id = course_info.get('google-spreadsheet', '–ù–µ —É–∫–∞–∑–∞–Ω')
            
            github_link = f"https://github.com/{github_org}" if github_org != '–ù–µ —É–∫–∞–∑–∞–Ω' else '–ù–µ —É–∫–∞–∑–∞–Ω'
            spreadsheet_link = f"https://docs.google.com/spreadsheets/d/{spreadsheet_id}" if spreadsheet_id != '–ù–µ —É–∫–∞–∑–∞–Ω' else '–ù–µ —É–∫–∞–∑–∞–Ω'
            
            course_text = (
                f"<b>üìö {name} ({semester})</b>\n"
                f"üîó GitHub: <a href=\"{github_link}\">{github_org}</a>\n"
                f"üìä –¢–∞–±–ª–∏—Ü–∞: <a href=\"{spreadsheet_link}\">{spreadsheet_id}</a>\n\n"
                f"<b>üß™ –ì—Ä—É–ø–ø–∞ {student.group_code} –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω—ã–µ</b>"
            )
        else:
            course_text = f"<b>üß™ –ì—Ä—É–ø–ø–∞ {student.group_code} –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω—ã–µ</b>"
        
        logger.info(f"Showing labs for user {cb.message.chat.id}, course {course_id}")
        await cb.message.delete()
        await cb.message.answer(
            course_text,
            reply_markup=labs_kb(labs, course_id),
            parse_mode="HTML",
            disable_web_page_preview=True
        )
        await cb.answer()

@router.callback_query(F.data.startswith("lab_"))
async def lab_selected(
    cb: CallbackQuery,
    students_repo: StudentRepository,
):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–æ–π"""
    _, course_id, lab_id = cb.data.split("_", 2)
    logger.info(f"User {cb.message.chat.id} selected lab {lab_id} for course {course_id}")
    student = await students_repo.get_by_chat(cb.message.chat.id)
    if not student:
        logger.warning(f"User {cb.message.chat.id} not registered")
        await cb.answer("‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Å—è", show_alert=True)
        return

    await cb.message.delete()
    wait_msg = await cb.message.answer("‚è≥ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞‚Ä¶")

    async def poll():
        """–û–ø—Ä–æ—Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø—Ä–æ–≤–µ—Ä–∫–∏"""
        logger.info(f"Starting lab grading for user {cb.message.chat.id}, lab {lab_id}")
        while True:
            async with aiohttp.ClientSession() as sess:
                res = await APIClient(sess).grade_lab(
                    course_id,
                    student.group_code,
                    lab_id,
                    student.github,
                )
            if not res:
                logger.error(f"Lab grading failed for user {cb.message.chat.id}, lab {lab_id}")
                txt = "‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞"
                await wait_msg.edit_text(txt, reply_markup=home_kb())
                return

            if res.get("status") == "pending":
                logger.info(f"Lab grading pending for user {cb.message.chat.id}, lab {lab_id}")
                await asyncio.sleep(15)
                continue

            if res.get("status") == "updated":
                logger.info(f"Lab grading completed for user {cb.message.chat.id}, lab {lab_id}")
                symbol = res.get("result", "‚úó")
                msg = res.get("message", "")
                passed = res.get("passed", "")
                checks = "\n".join(res.get("checks", []))
                text = (
                    f"{bold('–†–µ–∑—É–ª—å—Ç–∞—Ç')}: {symbol}\n"
                    f"{quote_html(msg)}\n\n"
                    f"{bold('–¢–µ—Å—Ç—ã')}: {passed}\n\n"
                    f"{checks}"
                )
                await wait_msg.edit_text(text, reply_markup=home_kb())
                return

            err = res.get("message", "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É")
            logger.error(f"Lab grading error for user {cb.message.chat.id}, lab {lab_id}: {err}")
            await wait_msg.edit_text(quote_html(err), reply_markup=home_kb())
            return

    asyncio.create_task(poll())
    await cb.answer()